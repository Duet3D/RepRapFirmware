Next steps for new movement system+IS
=====================================

[done a different way] Set Move.checkEndstops when executing movement that checks endstops or a Z probe
[done] DM must init and maintain (existing) flag isExtruder
[done] Init DM.segFlags when starting a new segment, clear it when we run out of segments
[done, testing] Handle retiring commited moves properly
[done] If a move checks endstops and the endstop is already triggered during Prepare, it remains busy for the length of the homing move, even though it doesn't move.
[done] We get the same delay when an endstop stops movement.
[done] Take account of raw motor moves when deciding whether to use IS. Maybe move useIS into MovementFlags?
[done] Extend use of DMState::starting to cover the case of the next segment starting some time after the previous one ends
[done] Sort out ClearExtrusionPending - don't update distanceBroughtForwards during motion
[done] Do we still need GetNetStepsTaken? Can we use the step counts instead?
[done] Sort out use of Kinematics::ControllingDrivers. Need different behaviour depending on whether it is used when homing or to update machine positions.
[done] Avoid zero-length/zero-duration moves
[probably caused by known issue when a tool selection fails due to insufficient axes homed, so ignore] If we try to start a print job without homing first, after that we can't home Z without a reset. 
[believed completed] Auto-generated moves on delta printers: need to segment them, except for Z probing moves
[not needed unless we get tiny layer shifts, also this is not as easy as I first thought] Eventually, store end position in segments. End positions specified by user must be exact numbers of motor steps. Segment boundaries may be fractional steps.
[done] Delta printer auto calibration not working
[done] Fix ExtruderPrintingSince, need to update variable extruderPrintingSince when we start a printing extruder move after not doing one - in NewSegmnent?
[done] Remove excess debug e.g. reporting hiccups in debug
[done] Remove CheckSegments except when debugging
[done] Set up params.useInputShaping, needed for CAN
[done] Use cumulativeHiccupTime and notify hiccups to expansion boards
[done] Allow for expansion boards introducing hiccups

Reduce RAM usage on Duet 2 and especially Duet 3 Mini:
- [done] Make MoveSegment smaller by not storing u
- [done] Make TMC22xx driver struct smaller
- [done by chrishamm] Eliminate static SBC buffers/structs
- [done] Change default AllocPermanent alignment from 8 to 4 bytes
- [done] When using WiFi interface, allocate buffers etc. from Lwip PBUF pool
- [done] When using SBC mode allocate transfer buffers etc. from Lwip PBUF pool
- [done] On 6HC/6XD store SBC transfer buffers in same memory as Lwip pool
- [done by chrishamm] Use smaller LWIP pool

S-curve option:
- Add M201.x command to configure rate of change of acceleration. Should we make it "time to reach full acceleration" instead, so that it can default to 0?
- Do we need to store extra data in the DDA, or can we just change the calc of acceleration time and acceleration distance?
- Take account of acceleration limits in DoLookahead

- Make MoveSegment smaller by not storing startTime? Would need to introduce dummy segments representing gaps between segments. Will probably only happen for extruders during travel moves, and axes during retract/reprime mobves.
- Make MoveSegment smaller by storing flag bits in spare bits of 'next' field e.g. lowest 2 bits and top bit

When using segmentation, sync segment duration to multiples/submultiples of IS period - this should reduce the number of segments needed

At the end of Prepare, don't send the move over CAN if it won't happen because endstops are already triggered - previously it checked for state=completed
Also, check whether/how in CanMotion we handle individual drives not moving because their endstops have triggered - that may be enough to handle the above.

Segment moves to keep them shorter than 2^31 step clocks

In the DM have a direction variable set to +1 or -1, to reduce conditional jumps [partially done already in NewSegment but can we do more?]

Move 'wasTriggered' into ZProbe, clear it on SetProbing(true), return it on SetProbing(false)

Change ZProbe::wasDeployedByUser to a count?

Store segments per step clock not segments per second, avoids a multiplication

Consider supporting separate X and Y IS parameters on Cartesian/Polar/SCARA machines and separate Z shaping parameters

In closed loop code use a simple cast instead of lrintf when rounding required motor current, to save CPU time

Can we speed up NewSegment, especially on 1LC?

Ideas (mostly alternatives) to reduce hiccups on 1LC/1XD especially if we want to support IS on these boards:
- Move DriveMovement::AddSegment into RAM
- Convert t0 and store as integer in NewSegment, then we can do an integer addition instead of FP addition in CalcNextStepTimeFull. Probably saves time assuming 2 or more steps per segment.
- Convert p, q and store as integer in NewSegment, then change CalcNextStepTimeFull to use integer maths. May need to do 62-bit integer square root again.
- Do all the segment maths in integer. Store distance as fixed point with e.g. 15 bits of whole steps and 16 bits of fractional part.
- Change DriveMovement::AddSegment to not disable interrupts for so long. Maybe have a flag bit "is being worked on" that we can set on a segment that we don't want the ISR to start executing. If the ISR sees this, it hiccups.
- In DriveMovement::AddSegment, before re-enabling interrupts call the step ISR in order to execute steps that shold have been done while interrupts were disabled. Only insert hiccups when step ISR really called in an interrupt.
- Change the way we add segments when doing IS. Currently we add the (up to 3) segments with no delay, then repeat for each of the delays and amplitudes. This means we create segments and to lots of splits and merges.
  Suppose we generate a segment chain for the move including the IS, and then merge that chain into the existing segments? We might find a better algorithm for generating the chain than generating segments and merging them. 
  Interrupts can be enabled while we generate the segment chain, and we can look at ways of allowing interrupts to be enabled at intervals while doing the merge.

Bugs:
- [done] "Tool was not driven because its temperatures were not high enough" in simulation mode
- [done] In simulation mode at least, stops processing X driver segments, then runs out of memory
- [done] In M122 report, completed moves shows as 0 at least when simulating
- [done] Test print doesn't heat bed or extruder but heating works manually from DWC
- [no fault] Spurious filament monitor errors - this was on a tool board
- [done] Step error when moving delta printer in X direction
- [done] Requested speed and top speed always show zero
- [done] Pauses after G1 H2 moves, especially if expansion boards are involved
- [done] Z probing not working
- [re-test] G1 H2 moves on delta: moves the wrong number of steps according to M114 (too few) if just 1 tower moving; ok if all 3 moving
- [done] Christian reports that G1 H1 E moves (using stall detection) crash
- [done] After delta printer auto calibration Z position is wrong until machine is homed again
- [done] Simulating a job doesn't work
- [done] Christian reports that multiple drivers with independent endstops for an axis don't work, the drivers that finish early remain disabled
- [done] When starting a new print after finishing one we get a filament error
- [done] Andy S reports that in 3.6, extruder positions for extruders on tool boards remain stuck on zero
- [done] Scanning Z probe not working, does the scxan but the height map shows only points at the ends of each scan line
- [done] Unwanted motion after 3-motor Z bed tramming, see https://forum.duet3d.com/topic/36187/z-axis-tramming-issues-with-3-6-0-alpha2-3
- We can still get step error 3 under some conditions e.g. very high microstepping. See https://forum.duet3d.com/post/343417. Can we have the ISR introduce hiccups to prevent this?
- Andy E reports issues with homing a CoreXY axis driven by 1HCLs. Endstop switch is on a 1LC.
- Andy E reports PA may not be getting used on 1LC
- My TC has DWC disconnections quite often. Similar issue reported by some users.
